generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  password       String
  firstname      String
  lastname       String
  role           String // student, instructor, admin
  bio            String?
  skills         String? // JSON or text
  profilePicture String? // URL
  createdAt      DateTime @default(now())

  streak streak?
  rank   rank?

  tournamentResults      tournamentresult[]
  courses                course[]                @relation("InstructorCourses")
  enrollments            enrollment[]
  instructorApplications instructorapplication[]
  reviews                review[]
  payments               payment[]
  sentMessages           message[]               @relation("SentMessages")
  receivedMessages       message[]               @relation("ReceivedMessages")
  forums                 forum[]
}

model rank {
  id     Int    @id @default(autoincrement())
  user   user   @relation(fields: [userId], references: [id])
  userId Int    @unique
  level  String // bronze, silver, gold, etc.
}

model streak {
  id        Int      @id @default(autoincrement())
  user      user     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  count     Int
  startAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model tournament {
  id        Int                @id @default(autoincrement())
  name      String
  game      String
  date      DateTime
  organizer String
  prizePool Decimal
  results   tournamentresult[]
}

model tournamentresult {
  id           Int        @id @default(autoincrement())
  user         user       @relation(fields: [userId], references: [id])
  userId       Int
  tournament   tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  placement    Int
  teamName     String?
  prizeEarned  Decimal
}

model course {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  instructor   user     @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId Int
  category     String
  price        Decimal
  createdAt    DateTime @default(now())

  lessons     lesson[]
  enrollments enrollment[]
  reviews     review[]
  payments    payment[]
  forums      forum[]
}

model lesson {
  id          Int      @id @default(autoincrement())
  course      course   @relation(fields: [courseId], references: [id])
  courseId    Int
  title       String
  content     String
  orderNumber Int
  createdAt   DateTime @default(now())
}

model enrollment {
  id         Int      @id @default(autoincrement())
  user       user     @relation(fields: [userId], references: [id])
  userId     Int
  course     course   @relation(fields: [courseId], references: [id])
  courseId   Int
  enrolledAt DateTime @default(now())
  progress   Int
  completed  Boolean
}

model instructorapplication {
  id              Int      @id @default(autoincrement())
  user            user     @relation(fields: [userId], references: [id])
  userId          Int
  applicationText String
  experience      String
  status          String // pending, approved, rejected
  appliedAt       DateTime @default(now())
}

model review {
  id        Int      @id @default(autoincrement())
  user      user     @relation(fields: [userId], references: [id])
  userId    Int
  course    course   @relation(fields: [courseId], references: [id])
  courseId  Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model payment {
  id            Int      @id @default(autoincrement())
  user          user     @relation(fields: [userId], references: [id])
  userId        Int
  course        course   @relation(fields: [courseId], references: [id])
  courseId      Int
  amount        Decimal
  paymentMethod String
  paymentStatus String
  paidAt        DateTime @default(now())
}

model message {
  id         Int      @id @default(autoincrement())
  sender     user     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   user     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  message    String
  sentAt     DateTime @default(now())
}

model forum {
  id        Int      @id @default(autoincrement())
  course    course   @relation(fields: [courseId], references: [id])
  courseId  Int
  user      user     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  content   String
  createdAt DateTime @default(now())
}